from django.utils import timezone
from financas.models import Transacao
from django.db.models import Sum
from django.http import Http404
from django.shortcuts import render, redirect
from django.contrib.auth import login, authenticate, logout
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User

def login_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')   # pega do formul√°rio
        password = request.POST.get('password')

        user = authenticate(request, username=email, password=password)  # aqui usamos o backend
        if user is not None:
            messages.success(request, "Login realizado com sucesso!")
            login(request, user)
        return redirect('financas:dashboard')
    
    return render(request, 'financas/index.html')

def logout_view(request):
    logout(request)
    return redirect('inicio')  # <-- vai para a home

def register_view(request):
    if request.method == "POST":
        username = request.POST.get("username")
        email = request.POST.get("email")
        password = request.POST.get("password")

        if User.objects.filter(username=username).exists():
            messages.error(request, "Esse usu√°rio j√° existe.")
            return redirect("register")

        user = User.objects.create_user(username=username, email=email, password=password)
        login(request, user)
        messages.success(request, "Cadastro realizado com sucesso!")
        return redirect("index")

    return render(request, "financas/register.html")

@login_required
def dashboard(request):
    financial_data = {
        "balance": 2500.00,   # saldo atual
        "income": 4000.00,
        "expenses": 1500.00,
        "savings": 800.00,
        "categories": [
            {"name": "Alimenta√ß√£o", "percentage": 40, "color": "#f87171"},
            {"name": "Transporte", "percentage": 25, "color": "#60a5fa"},
            {"name": "Lazer", "percentage": 20, "color": "#fbbf24"},
            {"name": "Educa√ß√£o", "percentage": 15, "color": "#34d399"},
        ],
        "recentTransactions": [
            {"description": "Supermercado", "category": "Alimenta√ß√£o", "date": "2025-08-09", "amount": -150.00},
            {"description": "Sal√°rio", "category": "Receita", "date": "2025-08-10", "amount": 4000.00},
            {"description": "Uber", "category": "Transporte", "date": "2025-08-11", "amount": -45.00},
            {"description": "Cinema", "category": "Lazer", "date": "2025-08-12", "amount": -60.00},
        ]
    }

    gastos = {
        'Alimenta√ß√£o': 37,
        'Transporte': 26,
        'Lazer': 20,
        'Sa√∫de': 11,
        'Outros': 6,
    }
    
    # As chaves (labels) e os valores (data) para o gr√°fico
    labels = list(gastos.keys())
    data = list(gastos.values())
    
    context = {
        'labels': labels,
        'data': data,
    }

    # Ordenar transa√ß√µes
    transactions = sorted(financial_data["recentTransactions"], key=lambda x: x["date"])

    # üëâ Saldo inicial customizado (por exemplo: m√™s passado)
    saldo_inicial = 1000.00  

    saldo = saldo_inicial
    saldo_evolucao = [saldo]  # j√° come√ßa com o inicial
    labels = ["Saldo inicial"]

    for tx in transactions:
        saldo += tx["amount"]
        saldo_evolucao.append(round(saldo, 2))
        labels.append(tx["date"])

    financial_data["saldo_inicial"] = saldo_inicial
    financial_data["saldo_evolucao"] = saldo_evolucao
    financial_data["saldo_labels"] = labels

    context = {"financial_data": financial_data}
    return render(request, "financas/dashboard.html", context)

@login_required
def transacoes(request):
    return render(request, "financas/transacoes.html")

@login_required
def categorias(request):
    return render(request, "financas/categorias.html")

@login_required
def metas(request):
    return render(request, "financas/metas.html")

@login_required
def conexoes_bancarias(request):
    return render(request, "financas/conexoes_bancarias.html")

@login_required
def configuracoes(request):
    return render(request, "financas/configuracoes.html")

def inicio(request):
    planos = [
        {
            "name": "Freemium",
            "price": "Gr√°tis",
            "description": "Para come√ßar a organizar suas finan√ßas",
            "features": [
                "Dashboard b√°sico",
                "At√© 3 metas financeiras",
                "An√°lise b√°sica de gastos",
                "Upload de at√© 5 extratos por m√™s",
                "1 usu√°rio (sem compartilhamento)",
                "Upload manual apenas",
                "Suporte por email"
            ],
            "popular": False,
            "cta": "Come√ßar Gr√°tis"
        },
        {
            "name": "Pro",
            "price": "R$ 19,90/m√™s",
            "description": "Controle completo das suas finan√ßas",
            "features": [
                "Tudo do Freemium",
                "Metas ilimitadas",
                "An√°lises avan√ßadas e sugest√µes",
                "Relat√≥rios detalhados",
                "Categoriza√ß√£o autom√°tica",
                "Alertas personalizados",
                "Exporta√ß√£o PDF/CSV",
                "Integra√ß√£o b√°sica com bancos",
                "Suporte priorit√°rio (email + chat)"
            ],
            "popular": True,
            "cta": "Assinar Pro"
        },
        {
            "name": "Premium",
            "price": "R$ 39,90/m√™s",
            "description": "M√°ximo controle + Acesso Familiar",
            "features": [
                "Tudo do Pro",
                "At√© 5 usu√°rios (Fam√≠lia Smart)",
                "Planejamento financeiro avan√ßado",
                "Previs√µes e simula√ß√µes",
                "Integra√ß√£o completa com bancos",
                "Consultoria financeira mensal",
                "API para integra√ß√µes",
                "Permiss√µes configur√°veis",
                "Suporte telef√¥nico"
            ],
            "popular": False,
            "cta": "Escolher Premium"
        }
    ]

    return render(request, 'financas/index.html', {"plans": planos})

def educacao(request):
    # Simula√ß√£o de usu√°rio
    user = {
        "username": "Sara",
        "plan": "freemium"  # ou "pro" / "premium"
    }
    
    is_pro = user['plan'] in ['pro', 'premium']

    basic_content = [
        {
            "title": "Como Controlar os Gastos",
            "description": "Aprenda t√©cnicas pr√°ticas para n√£o gastar mais do que ganha",
            "content": [
                "üéØ Regra 50-30-20: 50% necessidades, 30% desejos, 20% poupan√ßa",
                "üì± Use apps para acompanhar gastos di√°rios",
                "üõí Fa√ßa lista de compras e evite compras por impulso",
                "‚è∞ Espere 24h antes de compras n√£o essenciais",
                "üí≥ Prefira d√©bito ao cr√©dito quando poss√≠vel"
            ],
            "icon": "piggy-bank",
            "color": "blue"
        },
        {
            "title": "Criando uma Reserva de Emerg√™ncia",
            "description": "Por que e como construir sua seguran√ßa financeira",
            "content": [
                "üéØ Meta: 6 meses de gastos essenciais guardados",
                "üè¶ Mantenha em conta poupan√ßa ou CDB com liquidez",
                "üìà Comece com R$ 50-100 por m√™s",
                "üö® Use apenas para emerg√™ncias reais",
                "‚ö° Reponha sempre que usar"
            ],
            "icon": "target",
            "color": "green"
        },
        {
            "title": "Planejamento Financeiro B√°sico",
            "description": "Primeiros passos para organizar sua vida financeira",
            "content": [
                "üìä Anote todas as receitas e despesas",
                "üéØ Defina metas financeiras claras",
                "üìÖ Revise seu or√ßamento mensalmente",
                "üí∞ Quite d√≠vidas mais caras primeiro",
                "üìö Invista em educa√ß√£o financeira"
            ],
            "icon": "bar-chart",
            "color": "purple"
        },
        {
            "title": "Introdu√ß√£o aos Investimentos",
            "description": "Conceitos b√°sicos para come√ßar a investir",
            "content": [
                "üè¶ Comece com Tesouro Direto (renda fixa)",
                "üìà Diversifique seus investimentos",
                "‚è∞ Invista pensando no longo prazo",
                "üìö Estude antes de investir",
                "üí∏ Nunca invista dinheiro que voc√™ precisa"
            ],
            "icon": "trending-up",
            "color": "orange"
        }
    ]

    pro_content = [
        {
            "title": "An√°lise Avan√ßada de Mercado",
            "description": "Entenda indicadores econ√¥micos e como afetam seus investimentos",
            "topics": ["Taxa Selic e seus impactos", "Infla√ß√£o e poder de compra", "√çndices de bolsa", "An√°lise fundamentalista"],
            "icon": "bar-chart"
        },
        {
            "title": "Estrat√©gias de Investimento",
            "description": "T√©cnicas avan√ßadas para maximizar seus rendimentos",
            "topics": ["Diversifica√ß√£o de carteira", "Rebalanceamento", "Dollar Cost Averaging", "An√°lise de risco"],
            "icon": "trending-up"
        },
        {
            "title": "Planejamento Tribut√°rio",
            "description": "Como otimizar seus impostos legalmente",
            "topics": ["Imposto de Renda em investimentos", "Regime de tributa√ß√£o", "Dedu√ß√£o de IR", "Previd√™ncia privada"],
            "icon": "calculator"
        },
        {
            "title": "Consultoria Personalizada",
            "description": "An√°lises espec√≠ficas para seu perfil financeiro",
            "topics": ["Relat√≥rios detalhados", "Recomenda√ß√µes personalizadas", "Simula√ß√µes de cen√°rios", "Acompanhamento mensal"],
            "icon": "file-text"
        }
    ]

    context = {
        "user": user,
        "is_pro": is_pro,
        "basic_content": basic_content,
        "pro_content": pro_content,
    }

    return render(request, "financas/educacao.html", context)

